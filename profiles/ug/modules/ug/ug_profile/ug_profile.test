<?php

/**
 * @file
 * Tests for ug_profile.module.
 */

/**
 * Test UG Profile feature.
 */
class UGProfileTestCase extends TaxonomyWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'UG Profile',
      'description' => 'Test the UG Profile feature.',
      'group' => 'UG',
    );
  }

  function setUp() {
    $this->profile = 'ug';
    parent::setUp('ug_profile', 'ug_profile_layouts');
    theme_enable(array('ug_cornerstone'));
    theme_disable(array('bartik'));
    variable_set('theme_default', 'ug_theme');
    
    /* Allow creation of Drupal accounts. */
    $ldap_conf = variable_get('ldap_authentication_conf');
    $ldap_conf['authenticationMode'] = 1;
    variable_set('ldap_authentication_conf', $ldap_conf);
  }

  /**
   * Test PP1 - Listing page for multiple profiles
   */
  function testListingPage() {
    $node = array();
    $node['type'] = 'profile';
    $node['field_profile_name'][LANGUAGE_NONE][0]['value'] = $this->randomName(8);
    $node['field_profile_lastname'][LANGUAGE_NONE][0]['value'] = $this->randomName(8);
    $node['field_profile_title'][LANGUAGE_NONE][0]['value'] = $this->randomName(16);
    $this->drupalCreateNode($node);
    $this->drupalGet('people');
    $this->assertText($node['field_profile_title'][LANGUAGE_NONE][0]['value']);

    $pattern = "//button[@name='']";
    $elements = $this->xpath($pattern);
    $this->assertTrue(empty($elements), 'The filter button does not have empty name attribute.');
  }

  /**
   * Test node title
   */
  function testNodeTitle() {
    $name = $this->randomName(8);
    $last = "O'".$this->randomName(8); // Last name with apostrophe.
    $title = $name . " " . $last;
    $settings = array();
    $settings['type'] = 'profile';
    $settings['field_profile_name'][LANGUAGE_NONE][0]['value'] = $name;
    $settings['field_profile_lastname'][LANGUAGE_NONE][0]['value'] = $last;
    $node = $this->drupalCreateNode($settings);
    $this->drupalGet('node/'.$node->nid);
    $this->assertText($title);
  }

  /**
   * Test grid view.
   */
  function testGridView() {
    $this->drupalGet('people/faces');
    $node_list = $this->xpath('span > figure');
    $this->assertTrue(empty($node_list));
  }

  /**
   * Test uninstall hook behaviour.
   */
  function testHookUninstall() {
    /* Assert content type exists. */
    $this->assertTrue(node_type_get_type('profile'));
    /* Assert custom field exists (assume the rest are there). */
    $this->assertNotNull(field_info_field('field_profile_address'));    
    /* Disable and uninstall the feature. */
    module_disable(array('ug_profile', 'ug_profile_layouts'));
    drupal_uninstall_modules(array('ug_profile', 'ug_profile_layouts'));
    /* Assert profile type has been removed. */
    $this->assertFalse(node_type_get_type('profile'));
    /* Assert custom field has been deleted. */
    $this->assertNull(field_info_field('field_profile_address'));
  }

  /**
   * Test URL aliases
   */
  function testUrlAlias() {
    /* Generate data */
    $name = $this->randomName();
    $lastname = $this->randomName();
    /* Create a node */
    $settings = array('type' => 'profile');
    $settings['field_profile_name'][LANGUAGE_NONE][0]['value'] = $name;
    $settings['field_profile_lastname'][LANGUAGE_NONE][0]['value'] = $lastname;
    $node1 = $this->drupalCreateNode($settings);
    /* Get node. */
    $this->drupalGet('node/' . $node1->nid);
    /* Test URL. */
    $expected_path = 'people/' . strtolower($name) . '-' . strtolower($lastname);
    $this->assertUrl($expected_path);
  }

  /**
   * Test office label in teaser 
   */
  function testOfficeLabel() {
    // Generate data
    $name = $this->randomName();
    $lastname = $this->randomName();
    $office = $this->randomName();
    
    // Create node
    $settings = array('type' => 'profile');
    $settings['field_profile_name'][LANGUAGE_NONE][0]['value'] = $name;
    $settings['field_profile_lastname'][LANGUAGE_NONE][0]['value'] = $lastname;
    $node = $this->drupalCreateNode($settings);
    
    // Get listing page
    $this->drupalGet('people/');
    
    // Test office not present
    $this->assertNoText("Office:");
    
    // Add node
    $settings['field_profile_office'][LANGUAGE_NONE][0]['value'] = $office;
    $node2 = $this->drupalCreateNode($settings);
    
    // Get listing page
    $this->drupalGet('people/');
    
    // Test office present
    $this->assertText("Office:");
  }
  
  /**
   * Test Last Name Search
   */
  function testLastNameSearch() {
    // Fetch terms
    $vocab = taxonomy_vocabulary_machine_name_load('profile_role');
    $terms = taxonomy_term_load_multiple(array(), array("vid" => $vocab->vid));
    
    // Extract Term IDs
    $tids = array();
    foreach($terms as $term) {
      array_push($tids, $term->tid);
    }
    
    // Get data
    $count = 25;
    $data = json_decode(@file_get_contents("https://randomuser.me/api/?inc=name&results=$count&nat=gb"), true);
    if($data == NULL) {
      $data = array("results" => array());
      for($i = 0; $i < $count; $i++) {
        $data["results"][] = array("name" => array(
          "first" => $this->randomName(),
          "last" => $this->randomName()
        ));
      }
    }
    
    // Create nodes
    $settings = array('type' => 'profile');
    $nodes = array();
    $processed = 0; // Used to track first and second profiles to force duplicate
    foreach($data['results'] as $profile) {
      // Choose random role
      $tid = $tids[rand(0, count($tids) - 1)];
      
      // Default to random last name
      $lastname = ucfirst($profile['name']['last']);
      // Force at least one duplicate last name for testing purposes
      if($processed == 0 || $processed == 1) {
        $lastname = "Smith";
      }
      
      // Create node
      $settings['field_profile_name'][LANGUAGE_NONE][0]['value'] = ucfirst($profile['name']['first']);
      $settings['field_profile_lastname'][LANGUAGE_NONE][0]['value'] = $lastname;
      $settings['field_profile_role'][LANGUAGE_NONE][0]['tid'] = $tid;
      
      // Store node object and associted information
      array_push($nodes,
        array(
          'node' => $this->drupalCreateNode($settings),
          'tid' => $tid,
          'firstname' => ucfirst($profile['name']['first']),
          'lastname' => $lastname
        )
      );
      
      // Increment tracking number
      $processed++;
    }
    
    // Filter by just last name
    foreach($nodes as $node) {
      // Store last name (because $node reference is reused)
      $lastname = $node['lastname'];
      
      // Set GET parameters and navigate to search page
      $options = array('query' => array('field_profile_role_tid' => 'All', 'field_profile_lastname_value' => $lastname, 'undefined' => 'Apply'));
      $this->drupalGet('people/', $options);
      
      // Check each profile
      foreach($nodes as $node) {
        $name = $node['firstname'].' '.$node['lastname'];
        if($node['lastname'] == $lastname) {
          $this->assertText($name, $name.' found with search term \''.$lastname.'\'.', 'Filter by Last Name');
        } else {
          $this->assertNoText($name, $name.' not found with search term \''.$lastname.'\'.', 'Filter by Last Name');
        }
      }
    }
    
    // Filter by just partial last name
    foreach($nodes as $node) {
      // Store last name
      $lastname = $node['lastname'];
      
      // Select random fragment from beginning of last name
      $search = substr($lastname, 0, rand(2, strlen($lastname) - 2));
      
      // Set GET parameters and navigate to search page
      $options = array('query' => array('field_profile_role_tid' => 'All', 'field_profile_lastname_value' => $search, 'undefined' => 'Apply'));
      $this->drupalGet('people/', $options);
      
      // Check each profile
      foreach($nodes as $node) {
        $name = $node['firstname'].' '.$node['lastname'];
        
        // If lastname begins with search term
        if(strpos(strtolower($node['lastname']), strtolower($search)) === 0) {
          $this->assertText($name, $name.' found with search term \''.$search.'\'.', 'Filter by Partial Last Name');
        } else {
          $this->assertNoText($name, $name.' not found with search term \''.$search.'\'.', 'Filter by Partial Last Name');
        }
      }
    }
    
    // Filter by just role
    for($i = 0; $i < count($tids); $i++) {
      // Set GET parameters and navigate to search page
      $options = array('query' => array('field_profile_role_tid' => $tids[$i], 'field_profile_lastname_value' => '', 'undefined' => 'Apply'));
      $this->drupalGet('people/', $options);
      
      // Check each profile
      foreach($nodes as $node) {
        $name = $node['firstname'].' '.$node['lastname'];
        
        // If profile has the current term ID
        if($node['tid'] == $tids[$i]) {
          $this->assertText($name, $name.' found.', 'Filter by Role');
        } else {
          $this->assertNoText($name, $name.' not found.', 'Filter by Role');
        }
      }
    }
    
    // Filter by both last name and role
    // NOTE: Too many operations to loop through every combination of term and last name - select random sample instead
    $samples = 10;
    for($i = 0; $i < $samples; $i++) {
      // Select random node and get last name
      $node = $nodes[rand(0, count($nodes) - 1)];
      $lastname = $node['lastname'];
      $search = substr($lastname, 0, rand(2, strlen($lastname) - 2));
      // Select random term
      $tid = $tids[rand(0, count($tids) - 1)];
      
      // Set GET parameters and navigate to search page
      $options = array('query' => array('field_profile_role_tid' => $tid, 'field_profile_lastname_value' => $search, 'undefined' => 'Apply'));
      $this->drupalGet('people/', $options);
      
      // Check every profile
      foreach($nodes as $node) {
        $name = $node['firstname'].' '.$node['lastname'];
        if(strpos($node['lastname'], $search) === 0 && $node['tid'] == $tid) {
          $this->assertText($name, $name.' found.', 'Filter by Last Name and Role');
        } else {
          $this->assertNoText($name, $name.' not found.', 'Filter by Last Name and Role');
        }
      }
    }
    
    // Filter by single letter
    $alphabet = array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');
    foreach($alphabet as $letter) {
      // Set GET parameters and navigate to search page
      $options = array('query' => array('field_profile_role_tid' => 'All', 'field_profile_lastname_value' => $letter, 'undefined' => 'Apply'));
      $this->drupalGet('people/', $options);
      
      // Check each profile
      foreach($nodes as $node) {
        $name = $node['firstname'].' '.$node['lastname'];
        
        // If lastname begins with the current letter
        if(strpos(strtolower($node['lastname']), strtolower($letter)) === 0) {
          $this->assertText($name, $name.' found with search term \''.$letter.'\'.', 'Filter by Single Letter');
        } else {
          $this->assertNoText($name, $name.' not found with search term \''.$letter.'\'.', 'Filter by Single Letter');
        }
      }
    }
  }

  /*
   * Test tag settings
   */
  function testTagSettings() {
    // Generate terms
    $vocab = taxonomy_vocabulary_machine_name_load('profile_category');
    $term = $this->createTerm($vocab);

    // Create a profile
    $name = $this->randomName();
    $lastname = $this->randomName();
    $settings = array('type' => 'profile');
    $settings['field_profile_name'][LANGUAGE_NONE][0]['value'] = $name;
    $settings['field_profile_lastname'][LANGUAGE_NONE][0]['value'] = $lastname;
    $settings['field_profile_category'][LANGUAGE_NONE][0]['tid'] = $term->tid;
    $node = $this->drupalCreateNode($settings);

    $this->drupalGet('people/'.$term->tid);
    $this->assertText($name);
  }
}

